<?php

namespace Soluti\Repositories;

use Doctrine\ORM\EntityRepository;
use Soluti\Entities\Files;
use Soluti\Entities\UserFile;
use ZF\ApiProblem\ApiProblem;

/**
 * UserFileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserFileRepository extends EntityRepository
{
    public function updateUserFile(Files $file, array $users)
    {
        $this->removeUserFile($file);

        if (!empty($users)) {
            foreach ($users as $user) {
                $userFile = $this->findOneBy([
                    'file' => $file->getId(),
                    'user' => $user->getId()
                ]);

                if (is_null($userFile)) {
                    $userFile = new UserFile();
                }

                $userFile
                    ->setFile($file)
                    ->setUser($user);

                $result = $this->saveUserFile($userFile);

                if ($result instanceof ApiProblem) {
                    return $result;
                }
            }
        }

        return true;
    }

    private function removeUserFile(Files $file)
    {
        $query = $this->createQueryBuilder('userFile')
            ->delete()
            ->where('userFile.file = :file_id')
            ->setParameter('file_id', $file->getId());

        $query->getQuery()->getResult();
        $this->getEntityManager()->flush();
    }

    private function saveUserFile(UserFile $userFile)
    {
        try {
            $this->getEntityManager()->getConnection()->beginTransaction();

            if (is_null($userFile->getId())) {
                $this->getEntityManager()->persist($userFile);
            } else {
                $this->getEntityManager()->merge($userFile);
            }
            $this->getEntityManager()->flush();
            $this->getEntityManager()->getConnection()->commit();

            return $userFile;
        } catch (\Exception $e) {
            $this->getEntityManager()->getConnection()->rollBack();
            return new ApiProblem(500, 'Erro interno.');
        }
    }
}
