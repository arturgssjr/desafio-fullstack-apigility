<?php

namespace Soluti\Repositories;

use Doctrine\ORM\EntityRepository;
use Soluti\Entities\Files;
use Soluti\Entities\UserFile;
use Soluti\Entities\Users;
use ZF\ApiProblem\ApiProblem;

/**
 * FilesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FilesRepository extends EntityRepository
{
    public function insertFile($data)
    {
        $registerUser = $this->getRegisterUser($data->registerUser);

        if ($registerUser instanceof ApiProblem) {
            return $registerUser;
        }

        $accessUser = $this->getAccessUsers($data->accessUser);

        if ($accessUser instanceof ApiProblem) {
            return $accessUser;
        }

        $file = new Files();
        $file
            ->setFilename($data->filename)
            ->setMime($data->mime)
            ->setPath($data->path)
            ->setSize($data->size)
            ->setRegisterUser($registerUser)
            ->setCreatedAt(new \DateTime())
            ->setUpdatedAt(new \DateTime());

        return $this->saveFile($file, $accessUser);
    }

    public function updateFile($id, $data)
    {
        $registerUser = $this->getRegisterUser($data->registerUser);

        if ($registerUser instanceof ApiProblem) {
            return $registerUser;
        }

        $accessUser = $this->getAccessUsers($data->accessUser);

        if ($accessUser instanceof ApiProblem) {
            return $accessUser;
        }

        $file = $this->find($id);

        $file
            ->setFilename($data->filename)
            ->setMime($data->mime)
            ->setPath($data->path)
            ->setSize($data->size)
            ->setRegisterUser($registerUser)
            ->setUpdatedAt(new \DateTime());

        return $this->saveFile($file, $accessUser);
    }

    private function saveFile(Files $file, array $accessUser)
    {
        try {
            $this->getEntityManager()->getConnection()->beginTransaction();
            if (is_null($file->getId())) {
                $this->getEntityManager()->persist($file);
            } else {
                $this->getEntityManager()->merge($file);
            }
            $this->getEntityManager()->flush();

            $userFileRepository = $this->getEntityManager()->getRepository(UserFile::class);
            $userFile = $userFileRepository->updateUserFile($file, $accessUser);

            if (!$userFile) {
                $this->getEntityManager()->getConnection()->rollBack();
                return new ApiProblem(422, 'Não foi possível inserir arquivo ao usuário.');
            }

            $this->getEntityManager()->getConnection()->commit();

            return $file;
        } catch (\Exception $e) {
            $this->getEntityManager()->getConnection()->rollBack();
            return new ApiProblem(500, 'Erro interno.');
        }
    }

    private function getRegisterUser($id)
    {
        $userRepository = $this->getEntityManager()->getRepository(Users::class);

        $registerUser = $userRepository->find($id);

        if (!($registerUser instanceof Users)) {
            return new ApiProblem(404, 'Usuário de registro não encontrado.');
        }

        return $registerUser;
    }

    private function getAccessUsers($data)
    {
        if (empty($data)) {
            return [];
        }

        $userRepository = $this->getEntityManager()->getRepository(Users::class);

        $ids = explode(',', $data);

        $accessUser = [];
        foreach ($ids as $key => $user) {
            $accessUser[$key] = $userRepository->find($user);

            if (!($accessUser[$key] instanceof Users) && !empty($data)) {
                return new ApiProblem(404, 'Usuário de acesso não encontrado.');
            }
        }

        return $accessUser;
    }
}
